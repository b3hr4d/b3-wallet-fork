use b3_helper_lib::{error::TrapError, types::RequestId};
use ic_cdk::export::candid::{CandidType, Deserialize};

#[rustfmt::skip]
#[derive(CandidType, Deserialize,Clone, Debug, PartialEq)]
pub enum RequestError {
    UnknownError,
    InvalidRequest,
    InvalidNetwork,
    MissingAddress,
    InvalidTx(String),
    InvalidMsg(String),
    SignError(String),
    LedgerError(String),
    GenerateError(String),
    PublicKeyError(String),
    RequestNotFound(RequestId),
    RequestNotProcessed(RequestId),
    RequestAlreadyProcessed(RequestId),
    MissingWitnessScript,
    MissingSighashType,
    BitcoinGetAddressError,
    NoUtxos,
    BitcoinFeeTooHighError(u64, u64),
    BitcoinSignatureError(String),
    BitcoinGetBalanceError(String),
    BitcoinGetUtxosError(String),
    BitcoinSendTransactionError(String),
    BitcoinSendRawTransactionError(String),
    BitcoinGetCurrentFeePercentilesError(String),
    BitcoinGetFeeRateError(String),
    BitcoinInsufficientBalanceError(u64, u64),
    BitcoinInvalidFeePercentile,
    CyclesMintingError(String),
    CanisterStatusError(String),
    UpdateSettingsError(String),
    InvalidTransaction(String),
    SignerRoleNotAuthorized(String),
    SignerRoleNotFound(String, String),
    SignerNotFound(String),
    SignerAlreadyExists(String),
    SignerDoesNotExist(String),
    TransactionTooOld(u64),
    RequestAlreadySigned(String),
    ExecutionError(String),
    NotifyTopUpError(String),
    RecoverableSignatureError(String),
    DeadlineExceeded,
    Processing,
    InvalidMessageLength,
    CallerIsNotOwner,
    CannotRemoveDefaultAccount,
    EcdsaPublicKeyAlreadySet,
    MissingEcdsaPublicKey,
    InvalidEcdsaPublicKey,
    InvalidAccountIdentifier,
    WalletAccountNotExists,
    RequestNotExists,
    RequestExpired,
    RequestRejected,
    InvalidAddress,
    InvalidNetworkAddress,
    InvalidEvmTransactionType,
    NotSignedTransaction,
    InvalidController,
    InvalidSignature(String),
    InvalidMessage(String),
    InvalidPublicKey(String),
    InvalidRecoveryId(String),
    WalletAccountAlreadyExists,
    WalletAccountCounterMismatch
}

#[rustfmt::skip]
impl TrapError for RequestError {
    fn to_string(self) -> String {
        match self {
            RequestError::UnknownError => "::Unknown error".to_string(),
            RequestError::InvalidRequest => "::Invalid request".to_string(),
            RequestError::InvalidNetwork => "::Invalid network".to_string(),
            RequestError::InvalidNetworkAddress => "::Invalid network address".to_string(),
            RequestError::MissingAddress => "::Missing address".to_string(),
            RequestError::ExecutionError(msg) => ["::Execution error: ", &msg].concat(),
            RequestError::InvalidMsg(msg) => ["::Invalid message: ", &msg].concat(),
            RequestError::InvalidTx(msg) => ["::Invalid transaction: ", &msg].concat(),
            RequestError::SignError(msg) => ["::Sign error: ", &msg].concat(),
            RequestError::SignerNotFound(msg) => ["::", &msg, " is not a signer!"].concat(),
            RequestError::SignerRoleNotFound(signer, role) => ["::Signer ", &signer, " does not have role ", &role].concat(),
            RequestError::SignerRoleNotAuthorized(signer) => ["::Signer ", &signer, " is not authorized to sign!"].concat(),
            RequestError::SignerAlreadyExists(signer) => ["::Signer ", &signer, " already exists!"].concat(),
            RequestError::SignerDoesNotExist(signer) => ["::Signer ", &signer, " does not exist!"].concat(),
            RequestError::LedgerError(msg) => ["::Ledger error: ", &msg].concat(),
            RequestError::RequestExpired => "::Request expired!".to_string(),
            RequestError::RequestRejected => "::Request rejected!".to_string(),
            RequestError::RequestNotFound(msg) => ["::Request not found: ", &msg.to_string()].concat(),
            RequestError::GenerateError(msg) => ["::Generation error: ", &msg].concat(),
            RequestError::PublicKeyError(msg) => ["::Public key error: ", &msg].concat(),
            RequestError::CyclesMintingError(msg) => ["::Cycles minting error: ", &msg].concat(),
            RequestError::CanisterStatusError(msg) => ["::Canister status error: ", &msg].concat(),
            RequestError::UpdateSettingsError(msg) => ["::Update settings error: ", &msg].concat(),
            RequestError::InvalidTransaction(msg) => ["::Invalid transaction: ", &msg].concat(),
            RequestError::TransactionTooOld(nanos) => ["::Transaction too old: ", &nanos.to_string(), " nanoseconds"].concat(),
            RequestError::RequestAlreadySigned(signer) => ["::Signer ", &signer, " already signed"].concat(),
            RequestError::MissingWitnessScript => "::Missing witness script".to_string(),
            RequestError::MissingSighashType => "::Missing sighash type".to_string(),
            RequestError::NoUtxos => "::No UTXOs".to_string(),
            RequestError::BitcoinFeeTooHighError(fee, amount) => ["::Bitcoin fee too high: ", &fee.to_string(), " > ", &amount.to_string()].concat(),
            RequestError::BitcoinSignatureError(msg) => ["::Signature error: ", &msg].concat(),
            RequestError::BitcoinInvalidFeePercentile => "::Bitcoin invalid fee percentile".to_string(),
            RequestError::BitcoinGetAddressError => "::Bitcoin get address error".to_string(),
            RequestError::BitcoinGetBalanceError(msg) => ["::Bitcoin get balance error: ", &msg].concat(),
            RequestError::BitcoinGetUtxosError(msg) => ["::Bitcoin get utxos error: ", &msg].concat(),
            RequestError::BitcoinSendRawTransactionError(msg) => ["::Bitcoin send raw transaction error: ", &msg].concat(),
            RequestError::BitcoinGetCurrentFeePercentilesError(msg) => ["::Bitcoin get current fee percentiles error: ", &msg].concat(),
            RequestError::BitcoinSendTransactionError(msg) => ["::Bitcoin send transaction error: ", &msg].concat(),
            RequestError::BitcoinGetFeeRateError(msg) => ["::Bitcoin get fee rate error: ", &msg].concat(),
            RequestError::BitcoinInsufficientBalanceError(balance, amount) => ["::Bitcoin insufficient balance: ", &balance.to_string(), " < ", &amount.to_string()].concat(),
            RequestError::Processing => "::Processing error".to_string(),
            RequestError::InvalidMessageLength => "::Invalid message length".to_string(),
            RequestError::MissingEcdsaPublicKey => "::Missing ECDSA public key".to_string(),
            RequestError::CallerIsNotOwner => "::Caller is not the owner".to_string(),
            RequestError::CannotRemoveDefaultAccount => "::Cannot remove default account!".to_string(),
            RequestError::EcdsaPublicKeyAlreadySet => "::Public key already exists".to_string(),
            RequestError::InvalidEcdsaPublicKey => "::Invalid ECDSA public key!".to_string(),
            RequestError::InvalidAccountIdentifier => "::Invalid account identifier!".to_string(),
            RequestError::WalletAccountNotExists => "::Wallet account does not exist!".to_string(),
            RequestError::RequestNotExists => "::Request does not exist!".to_string(),
            RequestError::RequestNotProcessed(request_id) => ["::Request ", &request_id.to_string(), " not processed!"].concat(),
            RequestError::RequestAlreadyProcessed(request_id) => ["::Request ", &request_id.to_string(), " already processed!"].concat(),
            RequestError::NotifyTopUpError(msg) => ["::Notify top up error: ", &msg].concat(),
            RequestError::RecoverableSignatureError(msg) => ["::Recoverable signature error: ", &msg].concat(),
            RequestError::InvalidController => "::Invalid controller!".to_string(),
            RequestError::InvalidAddress => "::Invalid address!".to_string(),
            RequestError::InvalidEvmTransactionType => "::Invalid EVM transaction type!".to_string(),
            RequestError::NotSignedTransaction => "::Not signed transaction!".to_string(),
            RequestError::InvalidMessage(msg) => ["::Invalid message: ", &msg].concat(),
            RequestError::InvalidPublicKey(msg) => ["::Invalid public key: ", &msg].concat(),
            RequestError::InvalidRecoveryId(msg) => ["::Invalid recovery id: ", &msg].concat(),
            RequestError::InvalidSignature(msg) => ["::Invalid signature: ", &msg].concat(),
            RequestError::DeadlineExceeded => "::Deadline exceeded!".to_string(),
            RequestError::WalletAccountAlreadyExists => "::Wallet account already exists!".to_string(),
            RequestError::WalletAccountCounterMismatch => "::Wallet account counter mismatch!".to_string(),
        }
    }
}
